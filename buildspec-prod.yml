
version: 0.2
run-as: root

phases:

  install:
    commands:
      - echo Installing app dependencies...
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl   
      - chmod +x ./kubectl
      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
      - echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
      - source ~/.bashrc
      - echo 'Check kubectl version'
      - kubectl version --short --client
      #- chmod +x eks_cicd/prereqs.sh
      #- sh eks_cicd/prereqs.sh
      - apt-get install -y jq
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
      - echo "Current path is >>>"
      - sh $pwd
      - unzip ./sonar-scanner-cli-4.7.0.2747-linux.zip
      - ls $pwd
      - export export PATH=$PATH:./sonar-scanner-4.7.0.2747-linux/bin/

  pre_build:
    commands:
      - echo Logging into Amazon EKS...
      - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $AWS_CLUSTER_NAME
      - echo check config 
      - kubectl config view --minify
      - echo check kubectl access
      - kubectl get svc
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - echo $REPOSITORY_URI
      - docker pull $REPOSITORY_URI:$IMAGE_TAG
      

  build:
    commands:
      - sonar-scanner -Dsonar.login=squ_e8915fc8026dcbf9b24c6e4e70a5ed041d3f1793 -Dsonar.host.url=http://4.245.219.121:9000 -Dsonar.projectKey=$PROJECT_NAME -Dsonar.java.binaries=./src/main/java/*
      - sleep 5
      - |- 
        quality_status=$(curl -s -u squ_e8915fc8026dcbf9b24c6e4e70a5ed041d3f1793: http://4.245.219.121:9000/api/qualitygates/project_status?projectKey=$PROJECT_NAME | jq -r '.projectStatus.status')
        echo "SonarCloud analysistatus is $quality_status"; 
        if [ $quality_status = "ERROR" ] ; then exit 1;fi
      - echo Build started on `date`
      - echo Building the Docker image...          
      - docker build --cache-from $REPOSITORY_URI:$IMAGE_TAG -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG 

  #post_build:
   # commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - echo Push the latest image to cluster
      #- kubectl apply -f eks_cicd/deployment.yaml
      - kubectl apply -f $KUBERNETES_FILE
      - kubectl rollout restart deployment $DEPLOY_RESTART
      #- kubectl rollout restart -f eks_cicd/deployment.yaml
      - kubectl get svc --all-namespaces
      #- aws codepipeline start-pipeline-execution --name m50-diroapipostman-stage2 --region eu-west-1
      - echo "Waiting for 30 seconds..."
      - sleep 30
      - curl --silent -X POST -H "X-API-KEY:DU8aYRY9pr6ce1p2LJHeW6tLrW1vlGas4XUFN6F0" https://api.reflect.run/v1/suites/cicd-test/executions
      - aws codebuild start-build --project-name m50-diroapipostman-prod